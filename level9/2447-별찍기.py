"""
재귀적인 패턴으로 별을 찍어 보자. N이 3의 거듭제곱(3, 9, 27, ...)이라고 할 때, 크기 N의 패턴은 N×N 정사각형 모양이다.
크기 3의 패턴은 가운데에 공백이 있고, 가운데를 제외한 모든 칸에 별이 하나씩 있는 패턴이다.

***
* *
***

N이 3보다 클 경우, 크기 N의 패턴은 공백으로 채워진 가운데의 (N/3)×(N/3) 정사각형을 크기 N/3의 패턴으로 둘러싼 형태이다. 
예를 들어 크기 27의 패턴은 예제 출력 1과 같다.

N = 27의 경우, 

***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************
*********         *********
* ** ** *         * ** ** *
*********         *********
***   ***         ***   ***
* *   * *         * *   * *
***   ***         ***   ***
*********         *********
* ** ** *         * ** ** *
*********         *********
***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************

패턴 안에 패턴이 있는 모양이라 재귀적으로 풀 수 있는 듯 하지만,
나는 처음 보는 유형, 이런걸 보자마자 풀어야 알고리즘?적으로 센스가 있는걸까

N의 패턴은 공백으로 채워진 가운데의 (N/3)×(N/3) 정사각형을 크기 N/3의 패턴으로 둘러싼 형태입니다.

알겠는데.. 그걸 어떻게 출력해야 하지? 만드는 함수를 paint()라 하면 paint(27) 이고
paint27은 paint9가 가로 세로로 각각 3개씩 있는 모양이고(단 중간은 비움)
paint9도 paint3이 각각 가로 세로 3개씩 있는 모양
paint3는 마지막으로 정해주고

매커니즘은 알겠는데 출력을 어떻게 맞춰주여야 할까? 2차원 array로 맞추는게 가장 편해보임
2차원 numpy.ndarray를 쓰면 좋겠지만 여기서는 numpy를 쓸 수 없다. 어떻게 해야할까?
numpy ndarray를 구현하기? ㅋㅋ 절대안댐
"""
def fill_star(n):
    if n == 3:
        return [['*', '*', '*'], ['*', ' ', '*'], ['*', '*', '*']]

    array = [[' ' for i in range(n)] for i in range(n)]
    n = n // 3
    array_for_fill = fill_star(n)
    for i in [0, 2]:
        for row_index, row_for_fill in enumerate(array_for_fill):
            array[row_index + i * n] = row_for_fill * 3

    for row_index, row_for_fill in enumerate(array_for_fill):
        array[row_index + 1 * n] = row_for_fill + [' '] * n + row_for_fill
    
    return array

def print_array(array):
    for i, row in enumerate(array):
        for element in row:
            print(element, sep='', end='')
        if i != len(array) - 1:
            print('\n', end='')

n = int(input())

print_array(fill_star(n))
